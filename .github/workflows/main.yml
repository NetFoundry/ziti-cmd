name: build

on:
  push:
    branches:
      - main
      - release-v*
      - builx-action # TODO: prune after initial testing
  pull_request:
  workflow_dispatch:

env:
  GOFLAGS: "-trimpath"
  GOX_OUTPUT: "release/{{.Arch}}/{{.OS}}/{{.Dir}}"
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  gh_ci_key: ${{ secrets.GH_CI_KEY }}

jobs:
  mac-os-build:
    name: Build Mac OS binaries
    runs-on: macos-10.15
    steps:
      - name: Git Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Install Go
        uses: actions/setup-go@v2
        with:
          go-version: '~1.17.1'

      - name: Install Ziti CI
        uses: netfoundry/ziti-ci@v1

      - name: Build and Test
        run: |
          pip install --upgrade pip
          pip install awscli
          go install github.com/mitchellh/gox@latest
          $(go env GOPATH)/bin/ziti-ci generate-build-info common/version/info_generated.go version
          CGO_ENABLED=true $(go env GOPATH)/bin/gox -os=darwin -arch=amd64 -output=$GOX_OUTPUT ./...
          aws s3 sync --no-progress release/ s3://ziti-cmd-build-tmp/${{ github.run_id }}

  windows-build:
    name: Build Windows binaries
    runs-on: windows-2019
    steps:
      - name: Git Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Install Go
        uses: actions/setup-go@v2
        with:
          go-version: '~1.17.1'

      - name: Install Ziti CI
        uses: netfoundry/ziti-ci@v1

      - name: Build and Test
        shell: bash
        run: |
          choco install python --version 3.6.8
          python -m pip install --upgrade pip
          pip install awscli
          go install github.com/mitchellh/gox@latest
          $(go env GOPATH)/bin/ziti-ci generate-build-info common/version/info_generated.go version
          CGO_ENABLED=true $(go env GOPATH)/bin/gox -os=windows -arch=amd64 -output=$GOX_OUTPUT ./...
          aws s3 sync --no-progress release/ s3://ziti-cmd-build-tmp/${{ github.run_id }}

  tag-and-publish:
    name: Build Linux Binaries and Docker Image, Tag, and Publish
    runs-on: ubuntu-18.04
    needs: [ mac-os-build, windows-build ]
    steps:
      - name: Git Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Install Go
        uses: actions/setup-go@v2
        with:
          go-version: '~1.17.1'

      - name: Install Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.7'

      - name: Install Ziti CI
        uses: netfoundry/ziti-ci@v1

      - name: Build and Test
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          sudo apt-get update
          sudo apt-get -yq install gcc-arm-linux-gnueabihf g++-arm-linux-gnueabihf gcc-aarch64-linux-gnu
          python -m pip install --upgrade pip
          pip install awscli
          $(go env GOPATH)/bin/ziti-ci configure-git
          $(go env GOPATH)/bin/ziti-ci generate-build-info common/version/info_generated.go version
          go install github.com/mitchellh/gox@latest
          CGO_ENABLED=true $(go env GOPATH)/bin/gox -os=linux -arch=amd64 -output=$GOX_OUTPUT ./...
          CC=arm-linux-gnueabihf-gcc CGO_ENABLED=true gox -cgo -os=linux -arch=arm -output=$GOX_OUTPUT ./...
          CC=aarch64-linux-gnu-gcc CGO_ENABLED=true gox -cgo -os=linux -arch=arm64 -output=$GOX_OUTPUT ./...
          aws s3 sync --no-progress s3://ziti-cmd-build-tmp/${{ github.run_id }} release/
          aws s3 rm --recursive s3://ziti-cmd-build-tmp/${{ github.run_id }}

      - name: Publish
        if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/heads/release-v')
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          $(go env GOPATH)/bin/ziti-ci tag -v -f version
          $(go env GOPATH)/bin/ziti-ci publish-to-github

      - name: Trigger Smoketest
        env:
          JFROG_API_KEY: ${{ secrets.JFROG_API_KEY }}
          jenkins_user: ${{ secrets.JENKINS_USER }}
          jenkins_user_token: ${{ secrets.JENKINS_USER_TOKEN }}
          jenkins_job_token: ${{ secrets.JENKINS_JOB_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          $(go env GOPATH)/bin/ziti-ci publish-to-artifactory
          $(go env GOPATH)/bin/ziti-ci trigger-jenkins-smoke-build

      - name: Set up QEMU
        uses: docker/setup-qemu-action@master
        with:
          platforms: amd64,arm64,arm

      - name: Set up Docker BuildKit
        id: buildx
        uses: docker/setup-buildx-action@master

      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_HUB_API_USER }}
          password: ${{ secrets.DOCKER_HUB_API_TOKEN }}

      - name: Set up Docker image tags
        env:
          SNAPSHOT_REPO: openziti/ziti-tunnel
          RELEASE_REPO: netfoundry/ziti-tunnel
        id: tagprep
        run: |
          # If this is release tag then add the release repo and semver and "latest" to the list of tags
          BRANCH_REF="${GITHUB_HEAD_REF:-${GITHUB_REF}}"
          TAGS=""                                                                          
          if [[ "${BRANCH_REF}" =~ refs/tags/v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then             
            # drop the prefix, preserving the semver                                       
            REF_TAG=${BRANCH_REF#refs/tags/v}                                              
            for REPO in ${SNAPSHOT_REPO} ${RELEASE_REPO}; do                               
              TAGS+=",${REPO}:${REF_TAG},${REPO}:latest"                                   
            done                                                                           
          else                                                                             
            REF_TAG="$(sed -E 's/[^a-zA-Z0-9]/-/g;s/(^[^a-zA-Z0-9]+|[^a-zA-Z0-9]+$)//g' <<< "${BRANCH_REF}" | tr '[:upper:]' '[:lower:]')"
            TAGS+="${SNAPSHOT_REPO}:${REF_TAG}"                                            
          fi                                                                               
          TAGS=${TAGS#,} # drop leading comma char                                         
          # Set output parameters.                                                         
          echo ::set-output name=tags::${TAGS}                                             
      - name: Build & Push Multi-Platform Container Image to Hub
        uses: docker/build-push-action@v2
        with:
          builder: ${{ steps.buildx.outputs.name }}
          context: . # build context is workspace so we can copy artifacts from ./release
          file: ./ziti-tunnel/docker/Dockerfile.copy # a Dockerfile that does copy instead of fetch
          build-args: | # base dir for copy/add operations in Dockerfile
            DOCKER_BUILD_DIR=./ziti-tunnel/docker
          platforms: linux/amd64,linux/arm/v7,linux/arm64
          push: true
          tags: ${{ steps.tagprep.outputs.tags }}
